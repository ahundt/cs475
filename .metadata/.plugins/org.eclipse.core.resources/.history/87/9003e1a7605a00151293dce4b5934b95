package cs475;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.ConcurrentMap;
import java.util.stream.Collectors;

public class PredictMajority implements Predictor {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1296705870678586595L;

	public void train(List<Instance> instances) {
		// TODO train PredictMajority
		
		HashMap<Label<Number>,Integer> countMap = new HashMap<Label<Number>,Integer>();
					// count the number of times each label occurs
		for(Instance i: instances)
		{
			Label<Number> label = i.getLabel();
			if (countMap.containsKey(label)) 
			{
				countMap.put(label,	countMap.get(label)+1);
			} 
			else
			{
				countMap.put(label, 1);
			}
		}
		Optional<Entry<Label<Number>, Integer>> E =
	        		instances.stream().collect
	        		(
	        			Collectors.toMap(i->i.getLabel(), i->new Integer(1),Integer::sum)
	        		)
	        		// sort all the entries in reverse order by value (the count)
	        		.entrySet().stream().sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
	        		//
	        		.findFirst()
	        		;
		
		// TODO account for when the first entry and the second entry have equal counts

		try {
			majorityLabel = E.get().getKey();
		} catch (NoSuchElementException e) {
			majorityLabel = new Label<Number>(0);
		}
	    
		System.out.println("majorityLabel: " + majorityLabel + "\n");
	        
	}

	public Label<Number> predict(Instance instance) {
		// TODO predict PredictMajority
		return majorityLabel;
	}

	Label<Number> majorityLabel;
	
}
